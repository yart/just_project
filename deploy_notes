Примечания к заметкам Максима Филатова.
=======================
Раздел Primary Settings
=======================

    Change root password
    --------------------
    Не выполнял. Смысл раздела: сменить дефолтный, выдаваемый сисадмином
    провайдера хостинга пароль root'а на свой, желательно более сложный, в целях
    безопасности. Для этого Макс предлагает воспользоваться программой apg. Я,
    для тех же целей, пользуюсь программой KeePassX.

    Add admin user
    --------------
    Добавляем нового пользователя, отличного от пользователя root. Всё в тех же
    целях безопасности.

    Мне не совсем понятно, зачем Максим создаёт пользователя в группе admin. Этой
    группы, по-дефолту, в убунте нет. И команда useradd ругается на несуществующую
    группу. Пришлось добавлять вручную:
    -------------------------------
    | root@remote# groupadd admin |
    -------------------------------
    А потом уже добавлять пользователя.

    Далее, устанавливаем пароль для созданного пользователя. Тут вроде бы всё
    ясно. Следующая команда, visudo, открывает файл конфигурации команды sudo.
    Макс предложил записать туда вот такую строку:
    %admin ALL NOPASSWD:ALL
    Судя по содержанию, предполагается, что пользователи состоящие в группе admin,
    будут выполнять команды требующие прав root'а, без ввода пароля. Смутило меня
    вот что: в файле /etc/sudoers, который мы и редактируем, с помощью команды
    visudo, есть такая строчка:
    # %sudo ALL=NOPASSWD: ALL
    В комментарии, расположенном строкой выше, предлагается её раскомментировать,
    если есть желание добиться тех же целей, но для всех. Как видно, синтаксис
    несколько отличается, от предлагаемого Максом.

    Чтобы хоть как-то разобраться, нет ли тут какой ошибки, я воспользовался
    гуглом. Запрос по ключевым словам "ALL NOPASSWD:ALL", привёл меня вот на эту
    страницу: http://www.net4me.net/info/3/net102.html

    Н-да. Прочтение статьи ясности не прибавило. Ладно. Положимся на Макса, и
    пока оставим всё, как есть.

    Гм... Всё-таки хорошая это штука -- защита от дурака! visudo увидел ошибку во
    вновь введённой строке, и предложил на выбор исправить, убить или сохранить
    файл, как есть. Я выбрал исправить:
    %admin ALL=NOPASSWD:ALL
    После чего сохранился без каких-либо эксцессов.

    Однако!

    Public key auth
    ---------------
    Судя по всему, в этом подразделе, речь идёт об авторизации по публичному
    ключу. В гуглогруппе по RoR, мне было предложено несколько вариантов этого
    дела.

    Пожалуй, начну с начала. Первым делом, надо перебраться с пользователя root,
    на ранее созданного пользователя. У Макса это spbruby, у меня другой.
    Делается это командой "su юзер", где "юзер" -- имя ранее созданного
    пользователя. Чтобы не париться с именованием, предположим, я назвал этого
    самого юзера -- new_user.

    Заодно, я решил проверить, корректно ли выполнился предыдущий подраздел:
    ----------------------------------------
    | root@remote# su new_user             |
    | new_user@remote$ sudo apt-get update |
    ----------------------------------------
    Ух ты! Работает, шайтан-машина!

    Поехали дальше. Домашний каталог у нового пользователя девственно чист, за
    исключением трёх скрытых файлов:
    -----------------------------------------
    | new_user@remote$ pwd                  |
    |/home/new_user                         |
    | new_user@remote$ ls -a                |
    |.  ..  .bash_logout  .bashrc  .profile |
    -----------------------------------------

    Максим предлагает следующее: посмотреть локальный файл с публичным ключом
    командой cat, создать каталог .ssh в домашней папке пользователя new_user и,
    скопировав содержимое, через буфер обмена ввести его, командой "cat >", в
    файл .ssh/authorized_keys, на VDS/VPS попутно создавая этот самый файл.

    Также, в гуглогруппе, мне предложили воспользоваться и такими командами:
    1. предложение от sysadm
        local$ ssh-copy-id -i ~/.ssh/id_rsa.pub логин@имя_хоста_или_IP_удалённой_машины

        Здесь предлагается использовать скрипт ssh-copy-id, который может не
        идти в комплекте с ОС. В Убунту он есть. Я проверил. Кстати, sysadm
        утверждает, что этот скрипт идёт в комплекте с ssh для Убунту. Как я понял,
        логиниться предполагается от имени new_user, чтобы публичный ключ попал
        по адресу. И, судя по всему, нужный каталог и файл будут созданы
        автоматически.

    2. предложение от Димы
        scp ~/.ssh/id_rsa.pub user@remotebox:.ssh/authorized_keys

        Здесь мы используем команду scp. Как я понял из названия и man'а,
        копирует необходимые файлы по протоколу ssh. В Убунту она также имеется.
        И вроде бы никто не упомянул, что в других ОС она может отсутствовать.

    3. предложение от Thymothy N. Tsvetkov
        Воспользоваться утилитой из мира Ruby: ssh-forever. Вот её страничка:
        https://rubygems.org/gems/ssh-forever. И описание:
        Provides a replacement for the SSH command which automatically copies
        your public key while logging in
        gem install ssh-forever
        Если я всё правильно понял и перевёл (да-да, плюс ко всему, я ещё
        пытаюсь выучить английский), имеется в виду вот что: ssh-forever
        обеспечивает замену для стандартных команд протокола ssh, которые
        автоматически копируют ваш публичный ключ в процессе вашего логина.

        В общем, как-то так. Это предложение я пока не рассматривал. Во-первых,
        не совсем понял, куда надо устанавливать утилиту: на локальную машину,
        или на VDS/VPS. Во-вторых, если всё-таки на удалённую машину, то Ruby там
        ещё нет. Он там будет позже.

    В общем, в конечном итоге, решил воспользоваться первым предложением. Правда
    есть тут одна сложность: публичный ключ, который у меня есть, создавался для
    github. И по рекомендации с help.github.com, я повесил на него пароль.
    Пароль, ясное дело, отличается от того, который есть у пользователя new_user,
    на удалённой машине.

    Чтобы избежать действий вслепую, нашёл документацию на opennet.ru:
    http://www.opennet.ru/base/sec/ssh_pubkey_auth.txt.html
    Правда, как оно обычно бывает на работе, когда занимаешься чем-то левым,
    непосредственно с работой не связанным, тебя начинают атаковать начальство,
    клиенты и прочие непонятные люди, которым ты срочно нужен. После нескольких
    последовательных атак со стороны вышеперечисленных, мозг наотрез отказался
    воспринимать новые знания. Статья показалась ужасно запутанной.

    В общем, вот что я из неё понял: если при создании ключа, указывается пароль,
    то будьте уверенны, что ssh у вас его попросит.

    Так это, или не так, сейчас проверим.
    --------------------------------------------------------------------------
    | user@local$ ssh-copy-id -i ~/.ssh/id_rsa.pub new_user@000.111.222.333  |
    |new_user@000.111.222.333's password: <enter password>                   |
    |Now try logging into the machine, with "ssh 'new_user@000.111.222.333'",|
    |and check in:                                                           |
    |                                                                        |
    |.ssh/authorized_keys                                                    |
    |                                                                        |
    |to make sure we haven't added extra keys that you weren't expecting.    |
    --------------------------------------------------------------------------
    Всё прошло успешно, и ssh-copy-id предлагает залогиниться через ssh, как
    new_user@000.111.222.333, и проверить файл .ssh/authorized_keys, "чтобы
    убедиться, что мы не добавили левые ключи, которых вы не ожидали". Заботливый
    скрипт, однако!

    --------------------------------------------------------------------------
    | user@local$ ssh new_user@000.111.222.333                               |
    |Linux remote 2.6.bla-bla-bla #1 SMP Fri Oct 1 14:17:14 MSD 2010 i686    |
    |                                                                        |
    |The programs included with the Ubuntu system are free software;         |
    |the exact distribution terms for each program are described in the      |
    |individual files in /usr/share/doc/*/copyright.                         |
    |                                                                        |
    |Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by    |
    |applicable law.                                                         |
    |                                                                        |
    |To access official Ubuntu documentation, please visit:                  |
    |http://help.ubuntu.com/                                                 |
    |To run a command as administrator (user "root"), use "sudo <command>".  |
    |See "man sudo_root" for details.                                        |
    |                                                                        |
    | new_user@remote$                                                       |
    --------------------------------------------------------------------------

    Всё прошло удачно. Как я и предполагал, ssh попросил именно тот пароль,
    который я указывал при создании публичного ключа. Из чего следует два вывода:
    1. Надо надёжно забэкапить локальный файл ~/.ssh/id_rsa
    2. Никого и не под каким видом не подпускать к локальной машине. Во избежание.

    Следующий, немаловажный, как я понял момент: выставляем права на каталог
    ~/.ssh:
    remote$ chmod 600 .ssh/authorized_keys // только пользователь может читать
                                           // и изменять файл
    remote$ chmod 700 .ssh                 // только пользователь может видеть и
                                           // изменять каталог

    Уф! Вроде бы разобрался.

    Configure OpenSSH
    -----------------
    Здесь меняем стандартный порт, что, кстати, вызвало небольшую дискуссию
    в гуглогруппе. Основные аргументы против сводились к некоторому неудобству в
    дальнейшем использовании. Но Максим Филатов предложил внести следующие
    изменения конфигурационный файл для ssh (~/.ssh/config) на локальной машине:
    Host <any-name>
    Hostname <ip-or-fqdn>
    User some_user
    Port 22222

    В общем, на данном этапе решил порт не менять. Но взял себе на заметку найти
    и почитать что-нибудь по теме.

    Помимо смены порта, запрещаем доступ по ssh через root'а. Это, как я понял,
    первое имя пользователя, которое проверяют взломщики. Не будем рисковать.

    Следом добавляем своего пользователя в список разрешённых к подключению по ssh.
    Иначе мы к себе не попадём.

    И самое главное: всё здесь надо сделать предельно внимательно. Иначе придётся
    подламывать собственный сервер. Или переустанавливать. Хрен редьки не слаще.

    Вроде бы всё.

    Firewall
    --------
    Этот пункт опять вогнал меня в ступор. И вовсе не потому, что я знаю, как
    сделать лучше. Совсем наоборот - я вообще поначалу не понял, о чём тут речь.
    Спасибо Максиму. Он любезно разъяснил, что файл с настройками для файрвола,
    находится в гит-репозитарии, которым я и пользуюсь сейчас.

    В общем, вот что пришлось делать:
    1. sudo aptitude install git-core iptables
    Этого добра на моём VDS не водилось изначально.
    2. git clone git://github.com/Bregor/spbruby-deploy-notes.git
    3. cd spbruby-deploy-notes
    Далее -- по инструкции Макса.

    В файле /var/lib/iptables/rules_save, в строчке:
    -A INPUT -s x.x.x.x/32 -m comment --comment "Admin home" -j ACCEPT
    надо x.x.x.x поменять на свой статический ip-адрес. Если он есть. Желательно,
    чтобы он был домашним, то есть личным, ip-адресом. С этого адреса будет
    позволен полный доступ к серверу.

    И надо иметь в виду, если в предыдущем разделе не изменялся стандартный порт
    для ssh, то в следующей строчке надо исправить "22222" на "22".

    Всё. С предварительной настройкой покончено. Для проверки разорвал
    ssh-соединение и залогинился снова. Получилось. Завтра попробую проделать это
    с динамического ip-адреса.

==========================
Раздел User shell settings
==========================
    Colors, aliases, git-branch, etc
    --------------------------------
    Тут вроде как всё понятно.

    Locale settings
    ---------------
    Тут тоже.

===============================
Раздел Primary Software Install
===============================
    Prerequisites
    -------------

